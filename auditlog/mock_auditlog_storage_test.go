// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaznasho/yarmarok/auditlog (interfaces: AuditLogStorage)
//
// Generated by this command:
//
//	mockgen -destination=mock_auditlog_storage_test.go -package=auditlog github.com/kaznasho/yarmarok/auditlog AuditLogStorage
//
// Package auditlog is a generated GoMock package.
package auditlog

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuditLogStorage is a mock of AuditLogStorage interface.
type MockAuditLogStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAuditLogStorageMockRecorder
}

// MockAuditLogStorageMockRecorder is the mock recorder for MockAuditLogStorage.
type MockAuditLogStorageMockRecorder struct {
	mock *MockAuditLogStorage
}

// NewMockAuditLogStorage creates a new mock instance.
func NewMockAuditLogStorage(ctrl *gomock.Controller) *MockAuditLogStorage {
	mock := &MockAuditLogStorage{ctrl: ctrl}
	mock.recorder = &MockAuditLogStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditLogStorage) EXPECT() *MockAuditLogStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuditLogStorage) Create(arg0 *AuditLogRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAuditLogStorageMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuditLogStorage)(nil).Create), arg0)
}

// GetAll mocks base method.
func (m *MockAuditLogStorage) GetAll() ([]AuditLogRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]AuditLogRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAuditLogStorageMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAuditLogStorage)(nil).GetAll))
}
