// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaznasho/yarmarok/service (interfaces: RaffleService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/kaznasho/yarmarok/service"
)

// MockRaffleService is a mock of RaffleService interface.
type MockRaffleService struct {
	ctrl     *gomock.Controller
	recorder *MockRaffleServiceMockRecorder
}

// MockRaffleServiceMockRecorder is the mock recorder for MockRaffleService.
type MockRaffleServiceMockRecorder struct {
	mock *MockRaffleService
}

// NewMockRaffleService creates a new mock instance.
func NewMockRaffleService(ctrl *gomock.Controller) *MockRaffleService {
	mock := &MockRaffleService{ctrl: ctrl}
	mock.recorder = &MockRaffleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaffleService) EXPECT() *MockRaffleServiceMockRecorder {
	return m.recorder
}

// ContributorService mocks base method.
func (m *MockRaffleService) ContributorService(arg0 string) service.ContributorService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContributorService", arg0)
	ret0, _ := ret[0].(service.ContributorService)
	return ret0
}

// ContributorService indicates an expected call of ContributorService.
func (mr *MockRaffleServiceMockRecorder) ContributorService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContributorService", reflect.TypeOf((*MockRaffleService)(nil).ContributorService), arg0)
}

// Get mocks base method.
func (m *MockRaffleService) Get(arg0 string) (*service.Raffle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*service.Raffle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRaffleServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRaffleService)(nil).Get), arg0)
}

// Init mocks base method.
func (m *MockRaffleService) Init(arg0 *service.RaffleInitRequest) (*service.InitResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(*service.InitResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockRaffleServiceMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRaffleService)(nil).Init), arg0)
}

// List mocks base method.
func (m *MockRaffleService) List() (*service.RaffleListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(*service.RaffleListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRaffleServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRaffleService)(nil).List))
}
