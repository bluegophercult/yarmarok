// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaznasho/yarmarok/service (interfaces: RaffleService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/kaznasho/yarmarok/service"
)

// MockRaffleService is a mock of RaffleService interface.
type MockRaffleService struct {
	ctrl     *gomock.Controller
	recorder *MockRaffleServiceMockRecorder
}

// MockRaffleServiceMockRecorder is the mock recorder for MockRaffleService.
type MockRaffleServiceMockRecorder struct {
	mock *MockRaffleService
}

// NewMockRaffleService creates a new mock instance.
func NewMockRaffleService(ctrl *gomock.Controller) *MockRaffleService {
	mock := &MockRaffleService{ctrl: ctrl}
	mock.recorder = &MockRaffleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaffleService) EXPECT() *MockRaffleServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRaffleService) Create(arg0 *service.RaffleRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRaffleServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRaffleService)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockRaffleService) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRaffleServiceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRaffleService)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockRaffleService) Edit(arg0 string, arg1 *service.RaffleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockRaffleServiceMockRecorder) Edit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockRaffleService)(nil).Edit), arg0, arg1)
}

// Export mocks base method.
func (m *MockRaffleService) Export(arg0 string) (*service.RaffleExportResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Export", arg0)
	ret0, _ := ret[0].(*service.RaffleExportResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Export indicates an expected call of Export.
func (mr *MockRaffleServiceMockRecorder) Export(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockRaffleService)(nil).Export), arg0)
}

// Get mocks base method.
func (m *MockRaffleService) Get(arg0 string) (*service.Raffle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*service.Raffle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRaffleServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRaffleService)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockRaffleService) List() ([]service.Raffle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]service.Raffle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRaffleServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRaffleService)(nil).List))
}

// ParticipantService mocks base method.
func (m *MockRaffleService) ParticipantService(arg0 string) service.ParticipantService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipantService", arg0)
	ret0, _ := ret[0].(service.ParticipantService)
	return ret0
}

// ParticipantService indicates an expected call of ParticipantService.
func (mr *MockRaffleServiceMockRecorder) ParticipantService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipantService", reflect.TypeOf((*MockRaffleService)(nil).ParticipantService), arg0)
}

// PrizeService mocks base method.
func (m *MockRaffleService) PrizeService(arg0 string) service.PrizeService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrizeService", arg0)
	ret0, _ := ret[0].(service.PrizeService)
	return ret0
}

// PrizeService indicates an expected call of PrizeService.
func (mr *MockRaffleServiceMockRecorder) PrizeService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrizeService", reflect.TypeOf((*MockRaffleService)(nil).PrizeService), arg0)
}
